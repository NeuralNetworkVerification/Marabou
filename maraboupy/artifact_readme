Hello to the artifact evaluation committee

In this file we will explain in 3 stages how to tun the main experiments of our research. The stages are:
    1. Choosing the configuration (default - o gurobi, if yes..)
    2. Compiling Marabou
    3. Running the experiments

We note that for ease of explanations both <> and "" parenthesis were added for the explanation itself.

We also note that the mentioned order is correct for all configurations checked, with an exception of configuration
1-(D) which controls the s&c split strategy (polarity v.s. larges-interval), and is done after compilation, (stage 2)
contrary to configurations 1-(A), 1-(B) and 1-(C), as will be mentioned.

************************************************************************************************************************

Stage (1) - Choosing the configuration:

As mentioned in the paper, there are 4 main configuration which were tested and compared:

(A) SBT: symbolic bound tightening
(B) WS_ELIMINATION: merging consecutive weighted-sum (WS) layers in the model
(B) GUROBI: using LP-gurobi optimization, during preproccessing
(D) POLARITY: using polartiy-based splitting in the snc ("split & conquer") search algorithm

Each of these 4 settings is configured before the compilation process of Marabou (stage 2 out of 3), in a different
manner:


(A) SBT:

    Go to the file <src/configuration/GlobalConfiguration.cpp>
    and to line <55> - "const bool GlobalConfiguration::USE_SYMBOLIC_BOUND_TIGHTENING = X;"

    the boolean value X should be updated from "false" to "true"


(B) WS_ELIMINATION:

    Go to the file <src/configuration/GlobalConfiguration.cpp>
    and to line <62> - "const bool GlobalConfiguration::PREPROCESSOR_MERGE_CONSECUTIVE_WEIGHTED_SUMS = X;"

    the boolean value X should be updated from "false" to "true"


(C) GUROBI:

    Go to the file <CMakeLists.txt> located in the directory of the project
    and to line <15> - "option(ENABLE_GUROBI "Enable use the Gurobi optimizer" X)"

    the boolean value X should be updated from "OFF" to "ON"

    We note that Gurobi is a licenced-based software. Thus The current default configurations are without Gurobi. In
    case you choose to run with Gurobi, please go through the following steps:

    (*) Enter the Gurobi company website, sign up and obtain a license (a non-commercial academic license is free) -

        https://www.gurobi.com/documentation/9.0/quickstart_windows/software_installation_guid.html

        After obtaining a license, download the Gurobi LP-solver, version 9.0.2

        Download and extract Gurobi (the directory with bin/lib/docs/src etc.) into a directory of your choice.
        We'll direct Marabou to this directory from now on.

    (*) Navigate into <src/build> and run "make". A file called <libgurobi_c++.a> will be created.

    (*) Navigate into <lib>, rename the original <libgurobi_c++.a> in this directory and create a symlink to the new
        one ("ln -s ../src/build/libgurobi_c++.a libgurobi_c++.a")

    (*) Update the relevant environment variables:

        export GUROBI_HOME = DIRECTORY_TO_CHOSEN_GUROBI_HOME_FOLDER
        export PATH = ${PATH}:${GUROBI_HOME}/bin"
        export LD_LIBRARY_PATH = ${LD_LIBRARY_PATH}:${GUROBI_HOME}/lib
        export GRB_LICENSE_FILE = PATH_TO_GUROBI_LICENCE (ends with "/license/gurobi/gurobi.lic")


(D) POLARITY:

    Contrary to stages (A)-(B)-(C) which occur before compilation of Marabou, the snc configuration, including
    "polarity"-based splitting, is achieved by changing parameters of the functional code itself, and happens after
    compilation.

    Specifically, in the supplied <artifact_runner.py> file, each time a Marabou Option object is created
    (i.e. when the Marabou.createOptions() function is called), then the function receives a default parameter
    <sncSplittingStrategy> which is a string that represents the wanted splitting strategy, used by the
    "split & conquer" algorithm.

    As can be seen in <artifact_runner.py>  (lines <XXXXX> and <YYYYY>) - the <sncSplittingStrategy> value is "auto"
    which also, the default value, when no explicit value is given to the invoked Marabou.createOptions() function.

    for sncSplittingStrategy = "auto", the given strategy is indeed "polarity"-based splitting.

    I you choose to change the splitting strategy from "polarity" to based on the largest interval (as presented in
    the paper), then choose the parameter value as sncSplittingStrategy = "largest-interval".

    We note that all other parameters of the invoked createOptions() function, are unchanged.


************************************************************************************************************************

Stage (2) - Compiling Marabou:


Please go to the directory in which Marabou was saved and run the following commands:

    (*) mkdir build
    (*) cd ./build
    (*) cmake ..
    (*) cmake --build . -j 8

These commands will create a "build" directory and compile the Marabou framework with the updated settings. We note that
the compilation process itself may take time in the first time, due to running 57 tests for different aspects of the
code.



************************************************************************************************************************

Stage (3) - Running the experiments:

todo conitnue and elaborate
