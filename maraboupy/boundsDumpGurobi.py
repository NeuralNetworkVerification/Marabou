import random
import sys
import os
import tensorflow as tf
import numpy as np
import onnx
import onnxruntime
import argparse
import json

from maraboupy import MarabouNetworkONNX as monnx
from maraboupy import MarabouNetwork as mnet
from maraboupy import MarabouCore
from maraboupy import MarabouUtils
from maraboupy import Marabou

import matplotlib.pyplot as plt
import scipy.sparse as sp

import gurobipy as gp
from gurobipy import GRB

results = dict()

print('****************************************************** MAX TEST LP ******************************************************')

model = gp.Model("MaxTest")
var  = model.addMVar(shape=20, vtype=GRB.CONTINUOUS, name="var")
obj = np.array(([0.] * 18) +  [1.0, -1.0])


#[ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
# x0 <= 1
# x0 >= -1
# x1 <= 1
# x2 >= -1
# x0 <= 2
# x0 >= -2
# x0 <= 2
# x0 >= -2

#x4 <= x0 - x1
#x4 >= x0 - x1
#x5 <= x1 - x2
#x5 >= x1 - x2
#x6 <= x2 - x3
#x6 >= x2 - x3

#x9 <= x7 + x8
#x9 >= x7 + x8

#Max Constraints

### x4 in [-2,2], x5 in [-3,3], x6 in [-4,4]
### maxL7 = -2, maxL8 = -3, f7=5,f8=6
### x7 - (u4-maxL7)/(u4-l4)x4 - (u5-maxL7)/(u5-l5)x5 <= maxL7 - (u4-maxL7)/(u4-l4)l4 - (u5-maxL7)/(u5-l5)l5
### x7 - (u5-u4)/(u5-l5)x5 <= u5*(u4-l5)/(u5-l5)
### x8 - (u5-maxL8)/(u5-l5)x5 - (u6-maxL8)/(u6-l6)x6 <= maxL8 - (u5-maxL8)/(u5-l5)l5 - (u6-maxL8)/(u6-l6)l6
### x8 - (u6-u5)/(u6-l6)x6 <= u6*(u5-l6)/(u6-l6)

#x7 >= x4
#x7 >= x5
#x7 -x4 - 0.8333 x5 <= 2.5
#x7 - 0.1666 x5     <= 2.5

#x8 >= x5
#x8 >= x6
#x8 -x5 - 0.875 x6 <= 3.5
#x8 - 0.125 x6     <= 3.5


a = np.array([[ 1.,-1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [-1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 1.,-1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0.,-1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 0., 0., 1.,-1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 0., 0.,-1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 0., 0., 0., 0., 1.,-1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 0., 0., 0., 0.,-1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              
              [-1., 1., 1.,-1., 0., 0., 0., 0., 1.,-1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 1.,-1.,-1., 1., 0., 0., 0., 0.,-1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0.,-1., 1., 1.,-1., 0., 0., 0., 0., 1.,-1., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 1.,-1.,-1., 1., 0., 0., 0., 0.,-1., 1., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 0., 0.,-1., 1., 1.,-1., 0., 0., 0., 0., 1.,-1., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 0., 0., 1.,-1.,-1., 1., 0., 0., 0., 0.,-1., 1., 0., 0., 0., 0., 0., 0.],

              [ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,-1., 1.,-1., 1., 1.,-1.],
              [ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,-1., 1.,-1.,-1., 1.],


              [ 0., 0., 0., 0., 0., 0., 0., 0., 1.,-1., 0., 0., 0., 0.,-1., 1., 0., 0., 0., 0.],
              [ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,-1., 0., 0.,-1., 1., 0., 0., 0., 0.],
              [ 0., 0., 0., 0., 0., 0., 0., 0.,-1., 1.,-0.8333, 0.8333, 0., 0., 1.,-1., 0., 0., 0., 0.],
              [ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,-0.1666, 0.1666, 0., 0., 1.,-1., 0., 0., 0., 0.],
              [ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,-1., 0., 0., 0., 0.,-1., 1., 0., 0.],
              [ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,-1., 0., 0.,-1., 1., 0., 0.],
              [ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,-1., 1.,-0.875, 0.875, 0., 0., 1.,-1., 0., 0.],
              [ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,-0.125, 0.125, 0., 0., 1.,-1., 0., 0.]

])
A = sp.csr_matrix(a)
B = np.array([1.] * 4 + [2.] * 4 + [0.] * 6 + [0.] * 2 + [0.] * 2 + [2.5] * 2 + [0.] * 2 + [3.5] * 2)

model.addConstr(A @ var <= B, name="c")
model.setObjective(obj @ var, GRB.MAXIMIZE)
model.optimize()
print("Max")
print(var.X)
results['My bounds LP'] = [model.objVal,None]
print('Obj: %g' % model.objVal)

model.setObjective(obj @ var, GRB.MINIMIZE)
model.optimize()
print("Min")
print(var.X)
print('Obj: %g' % model.objVal)
results['My bounds LP'][1] = model.objVal

print('****************************************************** MAX TEST LP WITH CNN-CERT ******************************************************')

model = gp.Model("MaxTest")
var  = model.addMVar(shape=20, vtype=GRB.CONTINUOUS, name="var")
obj = np.array(([0.] * 18) +  [1.0, -1.0])

L7=[-2.,-3.]
U7=[2.,3.]
gama07 = (sum([(u / (u-l)) for l,u in zip(L7,U7)]) - 1) / (sum([(1 / (u-l)) for l,u in zip(L7,U7)]))
lmax7 = max(L7)
umin7 = min(U7)
#print('={},={},={}'.format())
gama7 = min(max(gama07, lmax7), umin7)
print('gama07={}, lmax7={}, umin7={}, gama7={}'.format(gama07, lmax7, umin7, gama7))
L8=[-3.,-4.]
U8=[3.,4.]
gama08 = (sum([(u / (u-l)) for l,u in zip(L8,U8)]) - 1) / (sum([(1 / (u-l)) for l,u in zip(L8,U8)]))
lmax8 = max(L8)
umin8 = min(U8)
gama8 = min(max(gama08, lmax8), umin8)
print('gama08={}, lmax8={}, umin8={}, gama8={}'.format(gama08, lmax8, umin8, gama8))

c7_0_umin = (U7[0] - gama7) / (U7[0] - L7[0])
c7_1_umin = (U7[1] - gama7) / (U7[1] - L7[1])
s7_umin = umin7 - c7_0_umin * L7[0] - c7_1_umin * L7[1]
c8_0_umin = (U8[0] - gama8) / (U8[0] - L8[0])
c8_1_umin = (U8[1] - gama8) / (U8[1] - L8[1])
s8_umin = umin8 - c8_0_umin * L8[0] - c8_1_umin * L8[1]

c7_0_gama0 = (U7[0] - gama07) / (U7[0] - L7[0])
c7_1_gama0 = (U7[1] - gama07) / (U7[1] - L7[1])
s7_gama0 = gama07 - c7_0_gama0 * L7[0] - c7_1_gama0 * L7[1]
c8_0_gama0 = (U8[0] - gama08) / (U8[0] - L8[0])
c8_1_gama0 = (U8[1] - gama08) / (U8[1] - L8[1])
s8_gama0 = gama08 - c8_0_gama0 * L8[0] - c8_1_gama0 * L8[1]
#Max Constraints

### x4 in [-2,2], x5 in [-3,3], x6 in [-4,4]
### maxL7 = -2, maxL8 = -3, f7=5,f8=6
### x7 - (u4-maxL7)/(u4-l4)x4 - (u5-maxL7)/(u5-l5)x5 <= maxL7 - (u4-maxL7)/(u4-l4)l4 - (u5-maxL7)/(u5-l5)l5
### x7 - (u5-u4)/(u5-l5)x5 <= u5*(u4-l5)/(u5-l5)
### x8 - (u5-maxL8)/(u5-l5)x5 - (u6-maxL8)/(u6-l6)x6 <= maxL8 - (u5-maxL8)/(u5-l5)l5 - (u6-maxL8)/(u6-l6)l6
### x8 - (u6-u5)/(u6-l6)x6 <= u6*(u5-l6)/(u6-l6)

#x7 >= x4
#x7 >= x5
#x7 -x4 - 0.8333 x5 <= 2.5
#x7 - 0.1666 x5     <= 2.5

#x8 >= x5
#x8 >= x6
#x8 -x5 - 0.875 x6 <= 3.5
#x8 - 0.125 x6     <= 3.5


a = np.array([[ 1.,-1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [-1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 1.,-1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0.,-1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 0., 0., 1.,-1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 0., 0.,-1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 0., 0., 0., 0., 1.,-1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 0., 0., 0., 0.,-1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              
              [-1., 1., 1.,-1., 0., 0., 0., 0., 1.,-1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 1.,-1.,-1., 1., 0., 0., 0., 0.,-1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0.,-1., 1., 1.,-1., 0., 0., 0., 0., 1.,-1., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 1.,-1.,-1., 1., 0., 0., 0., 0.,-1., 1., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 0., 0.,-1., 1., 1.,-1., 0., 0., 0., 0., 1.,-1., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 0., 0., 1.,-1.,-1., 1., 0., 0., 0., 0.,-1., 1., 0., 0., 0., 0., 0., 0.],

              [ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,-1., 1.,-1., 1., 1.,-1.],
              [ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,-1., 1.,-1.,-1., 1.],


              [ 0., 0., 0., 0., 0., 0., 0., 0., 1.,-1., 0., 0., 0., 0.,-1., 1., 0., 0., 0., 0.],
              [ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,-1., 0., 0.,-1., 1., 0., 0., 0., 0.],
              [ 0., 0., 0., 0., 0., 0., 0., 0.,-1., 1.,-0.8333, 0.8333, 0., 0., 1.,-1., 0., 0., 0., 0.],
              [ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,-0.1666, 0.1666, 0., 0., 1.,-1., 0., 0., 0., 0.],
              [ 0., 0., 0., 0., 0., 0., 0., 0.,-c7_0_umin, c7_0_umin,-c7_1_umin, c7_1_umin, 0., 0., 1.,-1., 0., 0., 0., 0.],
              [ 0., 0., 0., 0., 0., 0., 0., 0.,-c7_0_gama0, c7_0_gama0,-c7_1_gama0, c7_1_gama0, 0., 0., 1.,-1., 0., 0., 0., 0.],              
              [ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,-1., 0., 0., 0., 0.,-1., 1., 0., 0.],
              [ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,-1., 0., 0.,-1., 1., 0., 0.],
              [ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,-1., 1.,-0.875, 0.875, 0., 0., 1.,-1., 0., 0.],
              [ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,-0.125, 0.125, 0., 0., 1.,-1., 0., 0.],
              [ 0., 0., 0., 0., 0., 0., 0., 0.,-c8_0_umin, c8_0_umin,-c8_1_umin, c8_1_umin, 0., 0., 1.,-1., 0., 0., 0., 0.],
              [ 0., 0., 0., 0., 0., 0., 0., 0.,-c8_0_gama0, c8_0_gama0,-c8_1_gama0, c8_1_gama0, 0., 0., 1.,-1., 0., 0., 0., 0.]              

])
A = sp.csr_matrix(a)
B = np.array([1.] * 4 + [2.] * 4 + [0.] * 6 + [0.] * 2 + [0.] * 2 + [2.5] * 2 + [s7_umin] + [s7_gama0] + [0.] * 2 + [3.5] * 2 + [s8_umin] + [s8_gama0])

model.addConstr(A @ var <= B, name="c")
model.setObjective(obj @ var, GRB.MAXIMIZE)
model.optimize()
print("Max")
print(var.X)
results['My bounds LP WITH CNN-CERT'] = [model.objVal,None]
print('Obj: %g' % model.objVal)

model.setObjective(obj @ var, GRB.MINIMIZE)
model.optimize()
print("Min")
print(var.X)
print('Obj: %g' % model.objVal)
results['My bounds LP WITH CNN-CERT'][1] = model.objVal

print('****************************************************** MAX TEST LP LOWER CORNER ******************************************************')

model = gp.Model("MaxTest")
var  = model.addMVar(shape=20, vtype=GRB.CONTINUOUS, name="var")
obj = np.array(([0.] * 18) +  [1.0, -1.0])

#Max Constraints

### x4 in [-2,2], x5 in [-3,3], x6 in [-4,4]
### maxL7 = -2, maxL8 = -3, f7=5,f8=6
### x7 - (u4-maxL7)/(u4-l4)x4 - (u5-maxL7)/(u5-l5)x5 <= maxL7 - (u4-maxL7)/(u4-l4)l4 - (u5-maxL7)/(u5-l5)l5
### x8 - (u5-maxL8)/(u5-l5)x5 - (u6-maxL8)/(u6-l6)x6 <= maxL8 - (u5-maxL8)/(u5-l5)l5 - (u6-maxL8)/(u6-l6)l6

#x7 >= x4
#x7 >= x5
#x7 -x4 - 0.8333 x5 <= 2.5

#x8 >= x5
#x8 >= x6
#x8 -x5 - 0.875 x6 <= 3.5

a = np.array([[ 1.,-1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [-1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 1.,-1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0.,-1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 0., 0., 1.,-1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 0., 0.,-1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 0., 0., 0., 0., 1.,-1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 0., 0., 0., 0.,-1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              
              [-1., 1., 1.,-1., 0., 0., 0., 0., 1.,-1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 1.,-1.,-1., 1., 0., 0., 0., 0.,-1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0.,-1., 1., 1.,-1., 0., 0., 0., 0., 1.,-1., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 1.,-1.,-1., 1., 0., 0., 0., 0.,-1., 1., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 0., 0.,-1., 1., 1.,-1., 0., 0., 0., 0., 1.,-1., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 0., 0., 1.,-1.,-1., 1., 0., 0., 0., 0.,-1., 1., 0., 0., 0., 0., 0., 0.],

              [ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,-1., 1.,-1., 1., 1.,-1.],
              [ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,-1., 1.,-1.,-1., 1.],


              [ 0., 0., 0., 0., 0., 0., 0., 0., 1.,-1., 0., 0., 0., 0.,-1., 1., 0., 0., 0., 0.],
              [ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,-1., 0., 0.,-1., 1., 0., 0., 0., 0.],
              [ 0., 0., 0., 0., 0., 0., 0., 0.,-1., 1.,-0.8333, 0.8333, 0., 0., 1.,-1., 0., 0., 0., 0.],
              [ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,-1., 0., 0., 0., 0.,-1., 1., 0., 0.],
              [ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,-1., 0., 0.,-1., 1., 0., 0.],
              [ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,-1., 1.,-0.875, 0.875, 0., 0., 1.,-1., 0., 0.]

])
A = sp.csr_matrix(a)
B = np.array([1.] * 4 + [2.] * 4 + [0.] * 6 + [0.] * 2 + [0.] * 2 + [2.5] * 1 + [0.] * 2 + [3.5] * 1)

model.addConstr(A @ var <= B, name="c")
model.setObjective(obj @ var, GRB.MAXIMIZE)
model.optimize()
print("Max")
print(var.X)
results['My bounds LP LOWER CORNER'] = [model.objVal,None]
print('Obj: %g' % model.objVal)

model.setObjective(obj @ var, GRB.MINIMIZE)
model.optimize()
print("Min")
print(var.X)
print('Obj: %g' % model.objVal)
results['My bounds LP LOWER CORNER'][1] = model.objVal

print('****************************************************** MAX TEST LP UPPER CORNER ******************************************************')

model = gp.Model("MaxTest")
var  = model.addMVar(shape=20, vtype=GRB.CONTINUOUS, name="var")
obj = np.array(([0.] * 18) +  [1.0, -1.0])

#Max Constraints

### x4 in [-2,2], x5 in [-3,3], x6 in [-4,4]
### maxL7 = -2, maxL8 = -3, f7=5,f8=6
### x7 - (u5-u4)/(u5-l5)x5 <= u5*(u4-l5)/(u5-l5)
### x8 - (u6-u5)/(u6-l6)x6 <= u6*(u5-l6)/(u6-l6)

#x7 >= x4
#x7 >= x5
#x7 - 0.1666 x5     <= 2.5

#x8 >= x5
#x8 >= x6
#x8 - 0.125 x6     <= 3.5


a = np.array([[ 1.,-1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [-1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 1.,-1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0.,-1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 0., 0., 1.,-1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 0., 0.,-1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 0., 0., 0., 0., 1.,-1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 0., 0., 0., 0.,-1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              
              [-1., 1., 1.,-1., 0., 0., 0., 0., 1.,-1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 1.,-1.,-1., 1., 0., 0., 0., 0.,-1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0.,-1., 1., 1.,-1., 0., 0., 0., 0., 1.,-1., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 1.,-1.,-1., 1., 0., 0., 0., 0.,-1., 1., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 0., 0.,-1., 1., 1.,-1., 0., 0., 0., 0., 1.,-1., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 0., 0., 1.,-1.,-1., 1., 0., 0., 0., 0.,-1., 1., 0., 0., 0., 0., 0., 0.],

              [ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,-1., 1.,-1., 1., 1.,-1.],
              [ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,-1., 1.,-1.,-1., 1.],


              [ 0., 0., 0., 0., 0., 0., 0., 0., 1.,-1., 0., 0., 0., 0.,-1., 1., 0., 0., 0., 0.],
              [ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,-1., 0., 0.,-1., 1., 0., 0., 0., 0.],
              [ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,-0.1666, 0.1666, 0., 0., 1.,-1., 0., 0., 0., 0.],
              [ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,-1., 0., 0., 0., 0.,-1., 1., 0., 0.],
              [ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,-1., 0., 0.,-1., 1., 0., 0.],
              [ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,-0.125, 0.125, 0., 0., 1.,-1., 0., 0.]

])
A = sp.csr_matrix(a)
B = np.array([1.] * 4 + [2.] * 4 + [0.] * 6 + [0.] * 2 + [0.] * 2 + [2.5] * 1 + [0.] * 2 + [3.5] * 1)

model.addConstr(A @ var <= B, name="c")
model.setObjective(obj @ var, GRB.MAXIMIZE)
model.optimize()
print("Max")
print(var.X)
results['My bounds LP UPPER CORNER'] = [model.objVal,None]
print('Obj: %g' % model.objVal)

model.setObjective(obj @ var, GRB.MINIMIZE)
model.optimize()
print("Min")
print(var.X)
print('Obj: %g' % model.objVal)
results['My bounds LP UPPER CORNER'][1] = model.objVal

print('****************************************************** MAX TEST PLANET ******************************************************')

model = gp.Model("MaxTest")
var  = model.addMVar(shape=20, vtype=GRB.CONTINUOUS, name="var")
obj = np.array(([0.] * 18) +  [1.0, -1.0])


#[ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
# x0 <= 1
# x0 >= -1
# x1 <= 1
# x2 >= -1
# x0 <= 2
# x0 >= -2
# x0 <= 2
# x0 >= -2

#x4 <= x0 - x1
#x4 >= x0 - x1
#x5 <= x1 - x2
#x5 >= x1 - x2
#x6 <= x2 - x3
#x6 >= x2 - x3

#x9 <= x7 + x8
#x9 >= x7 + x8

#Max Constraints
#x7 >= x4
#x7 >= x5
#x7 -x4 - x5 <= 3
#x7 <= 3 ## Max Upper Bounds

#x8 >= x5
#x8 >= x6
#x8 -x5 - x6 <= 4
#x8 <= 4 ## Max Upper Bounds


a = np.array([[ 1.,-1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [-1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 1.,-1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0.,-1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 0., 0., 1.,-1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 0., 0.,-1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 0., 0., 0., 0., 1.,-1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 0., 0., 0., 0.,-1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              
              [-1., 1., 1.,-1., 0., 0., 0., 0., 1.,-1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 1.,-1.,-1., 1., 0., 0., 0., 0.,-1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0.,-1., 1., 1.,-1., 0., 0., 0., 0., 1.,-1., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 1.,-1.,-1., 1., 0., 0., 0., 0.,-1., 1., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 0., 0.,-1., 1., 1.,-1., 0., 0., 0., 0., 1.,-1., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 0., 0., 1.,-1.,-1., 1., 0., 0., 0., 0.,-1., 1., 0., 0., 0., 0., 0., 0.],

              [ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,-1., 1.,-1., 1., 1.,-1.],
              [ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,-1., 1.,-1.,-1., 1.],


              [ 0., 0., 0., 0., 0., 0., 0., 0., 1.,-1., 0., 0., 0., 0.,-1., 1., 0., 0., 0., 0.],
              [ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,-1., 0., 0.,-1., 1., 0., 0., 0., 0.],
              [ 0., 0., 0., 0., 0., 0., 0., 0.,-1., 1.,-1., 1., 0., 0., 1.,-1., 0., 0., 0., 0.],
              [ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,-1., 0., 0., 0., 0.],
              
              [ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,-1., 0., 0., 0., 0.,-1., 1., 0., 0.],
              [ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,-1., 0., 0.,-1., 1., 0., 0.],
              [ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,-1., 1.,-1., 1., 0., 0., 1.,-1., 0., 0.],
              [ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,-1., 0., 0.]              

])
A = sp.csr_matrix(a)
B = np.array([1.] * 4 + [2.] * 4 + [0.] * 6 + [0.] * 2 + [0.] * 2 + [3.] * 2  + [0.] * 2 + [4.] * 2)

model.addConstr(A @ var <= B, name="c")
model.setObjective(obj @ var, GRB.MAXIMIZE)
model.optimize()
print("Max")
print(var.X)
results['Planet bounds LP'] = [model.objVal,None]
print('Obj: %g' % model.objVal)

model.setObjective(obj @ var, GRB.MINIMIZE)
model.optimize()
print("Min")
print(var.X)
print('Obj: %g' % model.objVal)
results['Planet bounds LP'][1] = model.objVal
print('****************************************************** MAX TEST PLANET ******************************************************')

model = gp.Model("MaxTest")
var  = model.addMVar(shape=20, vtype=GRB.CONTINUOUS, name="var")
obj = np.array(([0.] * 18) +  [1.0, -1.0])


#[ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
# x0 <= 1
# x0 >= -1
# x1 <= 1
# x2 >= -1
# x0 <= 2
# x0 >= -2
# x0 <= 2
# x0 >= -2

#x4 <= x0 - x1
#x4 >= x0 - x1
#x5 <= x1 - x2
#x5 >= x1 - x2
#x6 <= x2 - x3
#x6 >= x2 - x3

#x9 <= x7 + x8
#x9 >= x7 + x8

#Max Constraints
#x7 >= x4
#x7 >= x5
#x7 -x4 - x5 <= 3

#x8 >= x5
#x8 >= x6
#x8 -x5 - x6 <= 4

a = np.array([[ 1.,-1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [-1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 1.,-1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0.,-1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 0., 0., 1.,-1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 0., 0.,-1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 0., 0., 0., 0., 1.,-1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 0., 0., 0., 0.,-1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              
              [-1., 1., 1.,-1., 0., 0., 0., 0., 1.,-1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 1.,-1.,-1., 1., 0., 0., 0., 0.,-1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0.,-1., 1., 1.,-1., 0., 0., 0., 0., 1.,-1., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 1.,-1.,-1., 1., 0., 0., 0., 0.,-1., 1., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 0., 0.,-1., 1., 1.,-1., 0., 0., 0., 0., 1.,-1., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 0., 0., 1.,-1.,-1., 1., 0., 0., 0., 0.,-1., 1., 0., 0., 0., 0., 0., 0.],

              [ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,-1., 1.,-1., 1., 1.,-1.],
              [ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,-1., 1.,-1.,-1., 1.],


              [ 0., 0., 0., 0., 0., 0., 0., 0., 1.,-1., 0., 0., 0., 0.,-1., 1., 0., 0., 0., 0.],
              [ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,-1., 0., 0.,-1., 1., 0., 0., 0., 0.],
              [ 0., 0., 0., 0., 0., 0., 0., 0.,-1., 1.,-1., 1., 0., 0., 1.,-1., 0., 0., 0., 0.],
              
              [ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,-1., 0., 0., 0., 0.,-1., 1., 0., 0.],
              [ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,-1., 0., 0.,-1., 1., 0., 0.],
              [ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,-1., 1.,-1., 1., 0., 0., 1.,-1., 0., 0.]              
])
A = sp.csr_matrix(a)
B = np.array([1.] * 4 + [2.] * 4 + [0.] * 6 + [0.] * 2 + [0.] * 2 + [3.] * 1  + [0.] * 2 + [4.] * 1)

model.addConstr(A @ var <= B, name="c")
model.setObjective(obj @ var, GRB.MAXIMIZE)
model.optimize()
print("Max")
print(var.X)
results['Planet bounds W/O Upper LP'] = [model.objVal,None]
print('Obj: %g' % model.objVal)

model.setObjective(obj @ var, GRB.MINIMIZE)
model.optimize()
print("Min")
print(var.X)
print('Obj: %g' % model.objVal)
results['Planet bounds W/O Upper LP'][1] = model.objVal

print('****************************************************** MAX TEST LP ******************************************************')

model = gp.Model("MaxTest")
var  = model.addMVar(shape=20, vtype=GRB.CONTINUOUS, name="var")
obj = np.array(([0.] * 18) +  [1.0, -1.0])


#[ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
# x0 <= 1
# x0 >= -1
# x1 <= 1
# x2 >= -1
# x0 <= 2
# x0 >= -2
# x0 <= 2
# x0 >= -2

#x4 <= x0 - x1
#x4 >= x0 - x1
#x5 <= x1 - x2
#x5 >= x1 - x2
#x6 <= x2 - x3
#x6 >= x2 - x3

#x9 <= x7 + x8
#x9 >= x7 + x8

#Max Constraints

L7=[-2.,-3.]
U7=[2.,3.]
gama07 = (sum([(u / (u-l)) for l,u in zip(L7,U7)]) - 1) / (sum([(1 / (u-l)) for l,u in zip(L7,U7)]))
lmax7 = max(L7)
umin7 = min(U7)
#print('={},={},={}'.format())
gama7 = min(max(gama07, lmax7), umin7)
print('gama07={}, lmax7={}, umin7={}, gama7={}'.format(gama07, lmax7, umin7, gama7))
L8=[-3.,-4.]
U8=[3.,4.]
gama08 = (sum([(u / (u-l)) for l,u in zip(L8,U8)]) - 1) / (sum([(1 / (u-l)) for l,u in zip(L8,U8)]))
lmax8 = max(L8)
umin8 = min(U8)
gama8 = min(max(gama08, lmax8), umin8)
print('gama08={}, lmax8={}, umin8={}, gama8={}'.format(gama08, lmax8, umin8, gama8))

c7_0 = (U7[0] - gama7) / (U7[0] - L7[0])
c7_1 = (U7[1] - gama7) / (U7[1] - L7[1])
s7 = gama7 - c7_0 * L7[0] - c7_1 * L7[1]
c8_0 = (U8[0] - gama8) / (U8[0] - L8[0])
c8_1 = (U8[1] - gama8) / (U8[1] - L8[1])
s8 = gama8 - c8_0 * L8[0] - c8_1 * L8[1]
print(c7_0, c7_1, s7)
print(c8_0, c8_1, s8)
### x4 in [-2,2], x5 in [-3,3], x6 in [-4,4]
### x7 - (u4-gama7)/(u4-l4)x4 - (u5-gama7)/(u5-l5)x5 <= gama7 - (u4-gama7)/(u4-l4)l4 - (u5-gama7)/(u5-l5)l5

### x8 - (u5-gama8)/(u5-l5)x5 - (u6-gama8)/(u6-l6)x6 <= gama8 - (u5-gama8)/(u5-l5)l5 - (u6-gama8)/(u6-l6)l6

#x7 >= x4
#x7 >= x5
#x7 - c7_0 * x4 - c7_1 * x5 <= s7

#x8 >= x5
#x8 >= x6
#x8 - c8_0 * x5 - c8_1 * x6 <= s8


a = np.array([[ 1.,-1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [-1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 1.,-1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0.,-1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 0., 0., 1.,-1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 0., 0.,-1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 0., 0., 0., 0., 1.,-1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 0., 0., 0., 0.,-1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              
              [-1., 1., 1.,-1., 0., 0., 0., 0., 1.,-1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 1.,-1.,-1., 1., 0., 0., 0., 0.,-1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0.,-1., 1., 1.,-1., 0., 0., 0., 0., 1.,-1., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 1.,-1.,-1., 1., 0., 0., 0., 0.,-1., 1., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 0., 0.,-1., 1., 1.,-1., 0., 0., 0., 0., 1.,-1., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 0., 0., 1.,-1.,-1., 1., 0., 0., 0., 0.,-1., 1., 0., 0., 0., 0., 0., 0.],

              [ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,-1., 1.,-1., 1., 1.,-1.],
              [ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,-1., 1.,-1.,-1., 1.],


              [ 0., 0., 0., 0., 0., 0., 0., 0., 1.,-1., 0., 0., 0., 0.,-1., 1., 0., 0., 0., 0.],
              [ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,-1., 0., 0.,-1., 1., 0., 0., 0., 0.],
              [ 0., 0., 0., 0., 0., 0., 0., 0.,-c7_0, c7_0,-c7_1, c7_1, 0., 0., 1.,-1., 0., 0., 0., 0.],
              [ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,-1., 0., 0., 0., 0.,-1., 1., 0., 0.],
              [ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,-1., 0., 0.,-1., 1., 0., 0.],
              [ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,-c8_0, c8_0,-c8_1, c8_1, 0., 0., 1.,-1., 0., 0.]

])
A = sp.csr_matrix(a)
B = np.array([1.] * 4 + [2.] * 4 + [0.] * 6 + [0.] * 2 + [0.] * 2 + [s7] * 1 + [0.] * 2 + [s8] * 1)

model.addConstr(A @ var <= B, name="c")
model.setObjective(obj @ var, GRB.MAXIMIZE)
model.optimize()
print("Max")
print(var.X)
results['CNN-CERT bounds LP'] = [model.objVal,None]
print('Obj: %g' % model.objVal)

model.setObjective(obj @ var, GRB.MINIMIZE)
model.optimize()
print("Min")
print(var.X)
print('Obj: %g' % model.objVal)
results['CNN-CERT bounds LP'][1] = model.objVal

print('****************************************************** MAX TEST MILP ******************************************************')

model = gp.Model("MaxTestMILP")
var  = model.addMVar(shape=20, vtype=GRB.CONTINUOUS, name="var")
b7 = model.addMVar(shape=1, vtype=GRB.BINARY, name="bin7")
b8 = model.addMVar(shape=1, vtype=GRB.BINARY, name="bin8")
obj = np.array(([0.] * 18) +  [1.0, -1.0])


#[ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
# x0 <= 1
# x0 >= -1
# x1 <= 1
# x2 >= -1
# x0 <= 2
# x0 >= -2
# x0 <= 2
# x0 >= -2

#x4 <= x0 - x1
#x4 >= x0 - x1
#x5 <= x1 - x2
#x5 >= x1 - x2
#x6 <= x2 - x3
#x6 >= x2 - x3

#x9 <= x7 + x8
#x9 >= x7 + x8

### x4 in [-2,2], x5 in [-3,3], x6 in [-4,4]
### maxL7 = -2, maxL8 = -3, f7=5,f8=6

#Max Constraints
#x7 >= x4
#x7 >= x5
#x8 >= x5
#x8 >= x6

#b7 <= 1 ### This is trivial here, but has a more important role in cases with more than a 2 inputs.
#b8 <= 1 ### This is trivial here, but has a more important role in cases with more than a 2 inputs.
#x7 - x4 - 5 * b7 <= 0 ###x7 <= x4 + (uf7 - l4) * b7
#x7 - x5 + 6 * b7 <= 6 ###x7 <= x5 + (uf7 - l5) * (1 - b7)
#x7 - x5 - 7 * b8 <= 0  ###x8 <= x5 + (uf8 - l5) * b8
#x7 - x6 + 8 * b8 <= 8  ###x8 <= x6 + (uf8 - l6) * (1 - b8)


a = np.array([[ 1.,-1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [-1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 1.,-1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0.,-1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 0., 0., 1.,-1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 0., 0.,-1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 0., 0., 0., 0., 1.,-1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 0., 0., 0., 0.,-1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              
              [-1., 1., 1.,-1., 0., 0., 0., 0., 1.,-1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 1.,-1.,-1., 1., 0., 0., 0., 0.,-1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0.,-1., 1., 1.,-1., 0., 0., 0., 0., 1.,-1., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 1.,-1.,-1., 1., 0., 0., 0., 0.,-1., 1., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 0., 0.,-1., 1., 1.,-1., 0., 0., 0., 0., 1.,-1., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 0., 0., 1.,-1.,-1., 1., 0., 0., 0., 0.,-1., 1., 0., 0., 0., 0., 0., 0.],

              [ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,-1., 1.,-1., 1., 1.,-1.],
              [ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,-1., 1.,-1.,-1., 1.],


              [ 0., 0., 0., 0., 0., 0., 0., 0., 1.,-1., 0., 0., 0., 0.,-1., 1., 0., 0., 0., 0.],
              [ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,-1., 0., 0.,-1., 1., 0., 0., 0., 0.],
#              [ 0., 0., 0., 0., 0., 0., 0., 0.,-1., 1.,-0.8333, 0.8333, 0., 0., 1.,-1., 0., 0., 0., 0.],
#              [ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,-0.1666, 0.1666, 0., 0., 1.,-1., 0., 0., 0., 0.],
              [ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,-1., 0., 0., 0., 0.,-1., 1., 0., 0.],
              [ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,-1., 0., 0.,-1., 1., 0., 0.]
#              [ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,-1., 1.,-0.875, 0.875, 0., 0., 1.,-1., 0., 0.],
#              [ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,-0.125, 0.125, 0., 0., 1.,-1., 0., 0.]

])
A = sp.csr_matrix(a)
B = np.array([1.] * 4 + [2.] * 4 + [0.] * 6 + [0.] * 2 + [0.] * 2 + [0.] * 2)

model.addConstr(A @ var <= B, name="c")
model.addConstr(var[14] - var[15] - var[8]  + var[9]  - 5 * b7 <= 0, "cb0")
model.addConstr(var[14] - var[15] - var[10] + var[11] + 6 * b7 <= 6, "cb1")
model.addConstr(var[16] - var[17] - var[10] + var[11] - 7 * b8 <= 0, "cb2")
model.addConstr(var[16] - var[17] - var[12] + var[13] + 8 * b8 <= 8, "cb3")
model.setObjective(obj @ var, GRB.MAXIMIZE)
model.optimize()
print("Max")
print(var.X)
print('Obj: %g' % model.objVal)
results['My bounds MILP'] = [model.objVal,None]

model.setObjective(obj @ var, GRB.MINIMIZE)
model.optimize()
print("Min")
print(var.X)
print('Obj: %g' % model.objVal)
results['My bounds MILP'][1] = model.objVal

print('****************************************************** MAX TEST EXISTING ("PLANET") MILP ******************************************************')

model = gp.Model("MaxTestMILP")
var  = model.addMVar(shape=20, vtype=GRB.CONTINUOUS, name="var")
b70 = model.addMVar(shape=1, vtype=GRB.BINARY, name="bin70")
b71 = model.addMVar(shape=1, vtype=GRB.BINARY, name="bin71")
b80 = model.addMVar(shape=1, vtype=GRB.BINARY, name="bin80")
b81 = model.addMVar(shape=1, vtype=GRB.BINARY, name="bin81")
obj = np.array(([0.] * 18) +  [1.0, -1.0])


#[ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
# x0 <= 1
# x0 >= -1
# x1 <= 1
# x2 >= -1
# x0 <= 2
# x0 >= -2
# x0 <= 2
# x0 >= -2

#x4 <= x0 - x1
#x4 >= x0 - x1
#x5 <= x1 - x2
#x5 >= x1 - x2
#x6 <= x2 - x3
#x6 >= x2 - x3

#x9 <= x7 + x8
#x9 >= x7 + x8

### x4 in [-2,2], x5 in [-3,3], x6 in [-4,4]
### maxL7 = -2, maxL8 = -3, f7=5,f8=6

#Max Constraints
#x7 >= x4
#x7 >= x5
#x8 >= x5
#x8 >= x6

#b7 <= 1 ### This is trivial here, but has a more important role in cases with more than a 2 inputs.
#b8 <= 1 ### This is trivial here, but has a more important role in cases with more than a 2 inputs.
#x7 - x4 - 5 * b70 <= 5 ###x7 <= x4 + (u4 - l5) * (1 - b70)
#x7 - x5 + 5 * b71 <= 5 ###x7 <= x5 + (u5 - l4) * (1 - b71)
#x7 - x5 - 7 * b80 <= 7 ###x8 <= x5 + (u5 - l6) * (1 - b80)
#x7 - x6 + 7 * b81 <= 7 ###x8 <= x6 + (u6 - l5) * (1 - b81)
# b70 + b71 <= 1
# b80 + b81 <= 1


a = np.array([[ 1.,-1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [-1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 1.,-1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0.,-1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 0., 0., 1.,-1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 0., 0.,-1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 0., 0., 0., 0., 1.,-1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 0., 0., 0., 0.,-1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              
              [-1., 1., 1.,-1., 0., 0., 0., 0., 1.,-1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 1.,-1.,-1., 1., 0., 0., 0., 0.,-1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0.,-1., 1., 1.,-1., 0., 0., 0., 0., 1.,-1., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 1.,-1.,-1., 1., 0., 0., 0., 0.,-1., 1., 0., 0., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 0., 0.,-1., 1., 1.,-1., 0., 0., 0., 0., 1.,-1., 0., 0., 0., 0., 0., 0.],
              [ 0., 0., 0., 0., 1.,-1.,-1., 1., 0., 0., 0., 0.,-1., 1., 0., 0., 0., 0., 0., 0.],

              [ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,-1., 1.,-1., 1., 1.,-1.],
              [ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,-1., 1.,-1.,-1., 1.],


              [ 0., 0., 0., 0., 0., 0., 0., 0., 1.,-1., 0., 0., 0., 0.,-1., 1., 0., 0., 0., 0.],
              [ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,-1., 0., 0.,-1., 1., 0., 0., 0., 0.],
#              [ 0., 0., 0., 0., 0., 0., 0., 0.,-1., 1.,-0.8333, 0.8333, 0., 0., 1.,-1., 0., 0., 0., 0.],
#              [ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,-0.1666, 0.1666, 0., 0., 1.,-1., 0., 0., 0., 0.],
              [ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,-1., 0., 0., 0., 0.,-1., 1., 0., 0.],
              [ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,-1., 0., 0.,-1., 1., 0., 0.]
#              [ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,-1., 1.,-0.875, 0.875, 0., 0., 1.,-1., 0., 0.],
#              [ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,-0.125, 0.125, 0., 0., 1.,-1., 0., 0.]

])
A = sp.csr_matrix(a)
B = np.array([1.] * 4 + [2.] * 4 + [0.] * 6 + [0.] * 2 + [0.] * 2 + [0.] * 2)

model.addConstr(A @ var <= B, name="c")
model.addConstr(var[14] - var[15] - var[8]  + var[9]  + 5 * b70 <= 5, "cb0")
model.addConstr(var[14] - var[15] - var[10] + var[11] + 5 * b71 <= 5, "cb1")
model.addConstr(var[16] - var[17] - var[10] + var[11] + 7 * b80 <= 7, "cb2")
model.addConstr(var[16] - var[17] - var[12] + var[13] + 7 * b81 <= 7, "cb3")
model.addConstr(b70 + b71 == 1, "cb4")
model.addConstr(b80 + b81 == 1, "cb5")
model.setObjective(obj @ var, GRB.MAXIMIZE)
model.optimize()
print("Max")
print(var.X)
print('Obj: %g' % model.objVal)
results['Old bounds MILP'] = [model.objVal,None]

model.setObjective(obj @ var, GRB.MINIMIZE)
model.optimize()
print("Min")
print(var.X)
print('Obj: %g' % model.objVal)
results['Old bounds MILP'][1] = model.objVal


print('****************************************************** RESULTS ******************************************************')
print(results)

[print(i) for i in sorted(results.items(), key=lambda item: abs(item[1][0]-item[1][1]))]
