*.d
*.obj
TAGS
/src/engine/tests/Engine.tests
*~
/src/input_parsers/mps_generic/mps_gensol.elf
/src/input_parsers/berkeley_example/berkeley_example.elf
/src/basis_factorization/tests/basis_factorization.tests
/src/basis_factorization/tests/runner.cxx
/src/basis_factorization/tests/cxxtest_Test_LUFactorization.cxx
/src/basis_factorization/tests/cxxtest_Test_ForrestTomlinFactorization.cxx
/src/basis_factorization/tests/cxxtest_Test_PermutationMatrix.cxx
*.DS_Store
*-checkpoint.ipynb
*.so
*.pyc
/src/engine/marabou.elf
tools/boost_1_68_0
/tools/boost.unzipped
/tools/boost_1_68_0.tar.gz
/tools/pybind11-2.3.0
/tools/protobuf*
/tools/OpenBLAS-*/
/tools/OpenBLASv*.tar.gz
/tools/onnx-1.10.2
/cpp_interface_example/example.elf
/src/input_parsers/mps_example/mps.elf

# CMake

CMakeLists.txt.user
CMakeCache.txt
CMakeFiles
CMakeScripts
Testing
Makefile
cmake_install.cmake
install_manifest.txt
compile_commands.json
CTestTestfile.cmake
_deps
/tools/pybind11_2_3_0.tar.gz
build
/.idea/
cmake-build-debug/

# Python

## Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

## C extensions
*.so

## Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

## PyInstaller
##  Usually these files are written by a python script from a template
##  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

## Installer logs
pip-log.txt
pip-delete-this-directory.txt

## Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

## Translations
*.mo
*.pot

## Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

## Flask stuff:
instance/
.webassets-cache

## Scrapy stuff:
.scrapy

## Sphinx documentation
docs/_build/

## PyBuilder
.pybuilder/
target/

## Jupyter Notebook
.ipynb_checkpoints

## IPython
profile_default/
ipython_config.py

## pyenv
##   For a library or package, you might want to ignore these files since the code is
##   intended to run in multiple environments; otherwise, check them in:
## .python-version

## pipenv
##   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
##   However, in case of collaboration, if having platform-specific dependencies or dependencies
##   having no cross-platform support, pipenv may install dependencies that don't work, or not
##   install all needed dependencies.
##Pipfile.lock

## poetry
##   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
##   This is especially recommended for binary packages to ensure reproducibility, and is more
##   commonly ignored for libraries.
##   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
##poetry.lock

## pdm
##   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
##pdm.lock
##   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
##   in version control.
##   https://pdm.fming.dev/#use-with-ide
.pdm.toml

## PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

## Celery stuff
celerybeat-schedule
celerybeat.pid

## SageMath parsed files
*.sage.py

## Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

## Spyder project settings
.spyderproject
.spyproject

## Rope project settings
.ropeproject

## mkdocs documentation
/site

## mypy
.mypy_cache/
.dmypy.json
dmypy.json

## Pyre type checker
.pyre/

## pytype static type analyzer
.pytype/

## Cython debug symbols
cython_debug/

## PyCharm
.idea/
