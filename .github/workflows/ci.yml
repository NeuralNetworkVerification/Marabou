on: [push, pull_request]
name: CI

env:
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ubuntu-latest #TODO: macos-latest
    name: Production

    steps:

      - uses: actions/checkout@v2

      - name: Install Packages
        if: 
        run: |
           sudo apt-get update
           sudo apt-get install -y \
             ccache \
             cxxtest
           python3 -m pip install --upgrade pip
           python3 -m pip install --upgrade setuptools
           python3 -m pip install wheel
           #python3 -m pip install -r maraboupy/test_requirements.txt --cache-dir $HOME/.pip-cache 
           echo "/usr/lib/ccache" >> $GITHUB_PATH

      - name: Create Build Environment
        run: cmake -E make_directory build

      - name: List paths
        run: |
          ls *
          echo "----------------------------------"
          ls tools

      - name: Restore Tools cache
        uses: actions/cache@v2 
        env:
          cache-name: cache-tools
        with: 
          path: tools
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: ${{ runner.os }}-build-${{ env.cache-name }}-

        
      # GitHub actions currently does not support modifying an already existing
      # cache. Hence, we create a new cache for each commit with key
      # cache-${{ runner.os }}-${{ matrix.cache-key }}-${{ github.sha }}. This
      # will result in an initial cache miss. However, restore-keys will search
      # for the most recent cache with prefix
      # cache-${{ runner.os }}-${{ matrix.cache-key }}-, and if found uses it as
      # a base for the new cache.
      - name: Restore ccache
        id: cache
        uses: actions/cache@v1
        with:
          path: ccache-dir
          key: cache-${{ runner.os }}-${{ github.sha }} # TODO: Add when switching to matrix ${{ matrix.cache-key }}-
          restore-keys: cache-${{ runner.os }}- # ${{ matrix.cache-key }}-

      - name: Configure ccache
        run: |
          ccache --set-config=cache_dir=${{ github.workspace }}/ccache-dir
          ccache --set-config=compression=true
          ccache --set-config=compression_level=6
          ccache -M 500M
          ccache -z

      - name: Configure CMake
        # Use a bash shell so we can use the same syntax for environment variable bb
        # access regardless of the host operating system
        shell: bash
        working-directory: build
        # Note the current convention is to use the -S and -B options here to specify source 
        # and build directories, but this is only available with CMake 3.13 and higher.  
        # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
        run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBUILD_PYTHON=ON -DCMAKE_CXX_COMPILER_LAUNCHER=ccache

      # - name: Build
      #   run: make -j2
      #   working-directory: build

      - name: ccache statistics
        run: ccache -s
      # - name: Run full CTest suite
      #   run: ctest -j2 
      #   working-directory: build

      # - name: Python Bindings Install Check
      #   run: |
      #     export PYTHONPATH="$PYTHONPATH:$(dirname $(find $GITHUB_WORKSPACE -name "maraboupy" -type d))"
      #     python3 -c "import maraboupy"
